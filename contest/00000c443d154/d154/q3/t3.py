from typing import List, Tuple, Optional

from collections import defaultdict,deque
from functools import cache
import heapq
from heapq import heappop,heappush 
from sortedcontainers import SortedDict,SortedList

from bisect import bisect_right,insort_left,bisect_left
from queue import Queue,LifoQueue,PriorityQueue
import math
INF  = math.inf

class Solution:
    def uniqueXorTriplets(self, nums: List[int]) -> int:
        mx = max(nums)
        mx2 = mx*2
        ret = [[False]*mx2 for _ in range(3)]
        for a in nums:
            ret[0][a] = True 
        nums = list(set(nums))
        for i in range(1,3):
            st = set()
            for j in range(mx2):
                if ret[i-1][j] == True:
                    st.add(j)
            for a in st:
                for b in nums:
                    ret[i][a^b] = True
        return sum(ret[2])



nums = [562,716,327,206,811,993,1143,28,445,298,627,237,207,1106,1116,975,1217,1198,922,1344,1304,831,200,1469,270,1055,1363,756,279,1400,609,171,824,1287,526,129,144,352,771,141,477,1255,16,84,696,761,1095,706,165,66,9,85,98,917,359,794,857,360,956,271,398,512,391,466,705,1111,1059,464,535,27,544,132,1193,876,1198,504,1384,107,816,1375,164,229,338,601,1051,25,976,801,1033,6,1395,892,1027,450,1347,483,324,1372,1084,733,458,1033,1301,383,1279,1405,72,639,476,324,470,155,1259,1097,223,1025,1186,1224,8,852,1019,157,1180,829,174,1446,166,959,1212,544,116,31,1277,287,578,20,588,125,1262,571,723,507,178,363,1347,1304,1142,453,742,687,745,1445,511,870,960,755,509,776,1125,857,514,541,834,1490,12,1129,276,390,1092,478,172,18,517,300,243,1297,317,448,1461,1348,1138,262,549,245,541,337,1098,446,50,1025,929,903,888,187,732,607,1449,532,712,951,621,365,294,28,935,438,841,1372,365,248,1362,1228,374,1319,1113,983,71,1038,383,1050,1409,1393,1154,44,1373,64,493,1349,199,1083,1118,702,951,1485,1155,165,1083,804,130,735,1276,1293,264,173,1354,376,979,317,228,1099,935,189,65,1306,616,1236,1179,1063,407,497,1012,75,883,1318,1054,1364,1251,1243,1251,569,86,627,1339,444,129,1064,631,1037,847,52,125,26,834,332,791,1354,1032,1394,313,842,379,404,1461,182,401,8,529,1318,1454,76,267,867,235,1481,1394,1273,119,484,374,221,156,462,515,308,266,1072,648,77,1363,269,1043,1151,442,1490,535,178,613,114,383,1322,1085,368,114,514,298,1384,768,640,55,238,392,1237,270,140,1404,932,541,280,72,108,362,794,772,1054,1310,1187,530,498,1003,1327,1040,1176,1382,373,694,1120,884,89,257,1252,267,612,801,1023,1200,1440,1161,717,1463,454,779,887,82,260,1319,1047,1297,669,1242,1106,204,601,165,104,1201,1405,308,719,723,754,242,924,865,992,209,1337,839,421,681,1119,731,296,133,1398,1475,398,1378,179,1401,122,725,567,1385,646,608,101,719,1171,1430,1053,553,872,329,191,1192,366,822,1055,1309,1162,1117,304,18,1395,522,674,493,65,68,458,1083,1172,1088,1033,208,761,767,600,720,1387,764,731,1027,671,1098,614,666,156,82,211,993,190,1282,296,610,1067,313,619,966,985,966,181,1457,1457,338,914,695,518,400,676,951,557,160,1217,331,686,1048,459,839,624,1175,509,1242,790,650,753,571,434,716,895,945,376,940,745,188,110,588,645,1081,319,1212,701,1258,577,46,943,334,80,1370,860,704,146,1065,854,964,830,233,268,992,198,1061,1083,20,884,725,767,169,1240,54,284,1014,613,1442,670,485,1191,55,341,1096,1050,289,182,1255,47,1491,952,103,965,621,780,1437,1250,942,790,289,61,873,1385,412,859,582,1472,577,956,547,355,1294,540,751,1252,278,517,397,219,1135,1205,1158,964,555,784,189,782,560,885,1309,1202,1136,347,798,1442,1237,719,434,1011,1345,152,885,201,911,206,562,153,912,1069,762,230,1338,665,686,1378,1089,1496,926,778,510,1432,729,1171,692,1005,646,810,217,9,370,502,469,439,1345,959,250,1298,1212,446,455,454,657,704,1087,634,986,130,971,39,121,739,624,967,1077,3,585,465,791,953,1368,1039,610,437,138,1249,829,586,306,421,678,286,1273,1391,656,14,1129,453,414,1198,448,165,535,1473,595,1056,744,794,1059,1413,19,1487,1176,723,252,1310,420,455,816,1296,168,149,1471,1038,526,327,150,213,1260,759,567,75,1347,915,923,403,623,840,297,772,554,600,1339,943,1108,111,708,728,655,705,598,1322,644,126,495,798,179,666,1446,1085,396,747,1469,1068,815,1423,701,1287,1216,1089,794,414,957,903,1479,1166,1288,696,1311,849,239,225,428,841,288,577,344,790,967,311,19,1166,638,1006,752,804,1046,878,1268,1158,823,491,414,712,318,706,1257,535,1364,33,649,1346,58,212,1242,977,234,65,254,1239,1121,1037,285,655,1289,965,1238,610,919,652,714,775,1477,1131,939,913,433,861,511,1345,1469,85,921,201,1013,756,918,917,368,849,1390,1030,1462,922,504,1001,38,1042,1005,239,548,748,966,1063,1494,557,857,1188,770,749,858,903,783,224,77,515,504,274,354,1211,771,51,523,750,378,1298,403,13,644,773,917,721,619,280,1368,925,1114,1260,711,1312,992,1448,197,212,1490,199,97,158,722,1037,824,451,142,1197,1347,587,400,1105,322,340,97,203,245,160,1331,631,1419,409,1411,1192,1238,948,152,268,109,453,557,506,642,924,728,61,640,1362,1062,1451,188,476,674,147,243,1465,1210,86,954,300,550,260,1046,494,1261,525,1136,1285,1237,142,794,1260,861,579,1355,500,241,646,634,943,674,73,194,1069,203,525,1280,404,1326,662,793,389,136,330,395,1227,237,415,1459,616,366,67,1128,1361,922,1470,901,537,1021,732,1500,756,509,254,359,613,737,633,712,1083,1396,1411,554,1383,292,45,629,278,960,346,1201,251,44,585,1086,348,349,1023,927,370,741,322,1036,1276,807,321,540,964,596,935,662,1461,1217,1448,703,1236,1200,338,654,1405,1146,278,970,1399,962,661,1164,809,600,1335,1316,21,272,209,658,1007,1226,1418,764,1085,53,360,1387,100,130,368,130,925,58,211,424,1001,420,1233,406,1280,996,57,1003,1079,1338,391,906,322,664,338,1119,194,821,1097,998,1218,81,689,1028,1083,382,1227,33,595,1303,1006,1203,1109,355,324,819,1231,793,902]
print(len(nums),len(set(nums)))
re =Solution().uniqueXorTriplets(nums)
print(re)