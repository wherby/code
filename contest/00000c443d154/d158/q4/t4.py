from typing import List, Tuple, Optional

from collections import defaultdict,deque
from functools import cache
import heapq
from heapq import heappop,heappush 
from sortedcontainers import SortedDict,SortedList

from bisect import bisect_right,insort_left,bisect_left
from queue import Queue,LifoQueue,PriorityQueue
import math
INF  = math.inf

class Solution:
    def goodSubtreeSum(self, vals: List[int], par: List[int]) -> int:
        mod = 10**9+7 
        n = len(vals)
        g = [[] for _ in range(n)]
        for i,a in enumerate(par):
            if a >=0:
                g[a].append(i)
        ret = 0
        
        def mergeTwo(dic1,dic2):
            dic= defaultdict(int)
            for k in dic1.keys():
                dic[k] = max(dic1[k],dic2[k])
            for k in dic2.keys():
                dic[k] = max(dic1[k],dic2[k])
            return dic
        
        def isGood(val):
            ls = [a for a in str(val)]
            return len(ls) == len(set(ls))

        def dfs(i):
            nonlocal ret
            dic =defaultdict(int)
            if isGood(vals[i]):
                ls = [int(a) for a in str(vals[i])]
                t = 0 
                for a in ls:
                    t += 1<<int(a)
                dic[t] = vals[i]
            for b in g[i]:
                t1  =dfs(b)
                dic= mergeTwo(dic,t1)
            #print(dic)
            ret +=quick(dic,(1<<10)-1)
            return dic

        def quick(dic,msk):
            bls = [k.bit_count() for k in dic.keys() if k&msk == k ]
            ret = 0
            if len(bls) ==0:
                return 0
            #print(msk,dic)
            mx = max(bls)
            cand = [k for k in dic.keys() if k.bit_count()==mx  and k&msk == k  ]
            for a in cand:
                ret =max(ret,dic[a] + quick(dic,msk - a))
            return ret

        dfs(0)
        return ret %mod

vals = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5]
par = [-1,426,325,253,383,233,108,108,321,481,321,426,394,87,234,63,209,23,190,11,475,436,202,251,437,313,150,45,152,422,205,399,287,24,200,1,425,284,131,451,355,283,144,83,343,426,435,375,421,328,195,216,246,269,102,111,42,49,84,202,419,221,245,426,450,84,14,140,231,313,333,87,289,409,269,370,31,34,188,426,301,496,353,481,343,263,411,309,203,114,44,39,430,235,268,205,0,409,84,472,465,131,237,463,69,131,10,61,266,317,295,472,46,75,185,242,487,167,373,331,359,211,221,42,475,478,166,330,49,351,382,61,383,32,143,69,460,157,200,409,130,97,5,195,256,336,260,294,466,266,0,442,437,252,170,237,67,435,107,396,447,263,181,247,418,32,222,396,320,220,216,463,309,355,276,397,197,47,427,46,355,8,160,399,107,30,220,185,176,69,124,298,337,24,64,269,366,333,200,386,172,53,87,420,125,493,259,198,199,102,349,425,174,92,97,103,432,124,112,292,343,493,30,40,481,257,61,190,253,481,367,314,431,87,221,237,180,269,193,496,190,71,351,83,304,30,266,198,256,341,256,245,313,32,147,106,133,190,186,294,164,45,428,425,364,407,172,33,497,309,375,419,59,395,105,299,321,24,129,283,322,46,270,13,122,461,111,71,343,150,84,133,5,353,431,270,65,325,490,126,410,202,236,498,62,81,5,23,302,0,186,432,471,87,158,124,274,493,283,186,180,355,306,25,425,343,49,473,150,290,496,261,409,463,6,173,92,10,290,269,228,362,23,442,91,130,379,102,30,270,353,426,304,493,319,288,143,343,130,281,427,200,332,450,74,216,493,475,426,325,166,107,154,284,348,0,164,260,129,221,475,343,202,294,357,288,62,133,328,370,365,166,344,97,352,317,375,19,420,485,197,173,432,474,181,213,439,229,144,343,149,155,442,47,283,149,228,195,431,272,492,104,284,33,235,222,357,292,399,314,202,32,355,185,46,333,497,139,71,37,202,122,309,431,464,87,382,235,422,309,233,61,481,403,268,10,119,430,214,478,102,356,211,309,433,45,217,174,164,222,358,406,375,481,232,44,447,37,87,250,449,493,386,29,18,442,122,32,40,185,45,493,250,172,260,129,477,463,463,164]

re =Solution().goodSubtreeSum(vals , par )
print(re)