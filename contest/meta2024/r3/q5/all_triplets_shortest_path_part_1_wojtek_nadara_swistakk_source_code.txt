#pragma GCC optimize("O3")
#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// using namespace __gnu_pbds;
// gp_hash_table<int, int> mapka;

#define MP make_pair
#define PB push_back
#define int long long
#define st first
#define nd second
#define rd third
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define RE(i, n) FOR(i, 1, n)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define __builtin_ctz __builtin_ctzll
#define __builtin_clz __builtin_clzll
#define __builtin_popcount __builtin_popcountll
using namespace std;

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define cerr if(0)cout
#endif
#define next ____next
#define prev ____prev
#define left ____left
#define hash ____hash
typedef long long ll;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<ll> VLL;
typedef vector<pair<int, int> > VPII;
typedef vector<pair<ll, ll> > VPLL;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.first << ", " << pair.second << ")";}
template<class A, class B, class C> struct Triple { A first; B second; C third;
bool operator<(const Triple& t) const { if (st != t.st) return st < t.st; if (nd != t.nd) return nd < t.nd; return rd < t.rd; } };
template<class T> void ResizeVec(T&, vector<int>) {}
template<class T> void ResizeVec(vector<T>& vec, vector<int> sz) {
  vec.resize(sz[0]); sz.erase(sz.begin()); if (sz.empty()) { return; }
  for (T& v : vec) { ResizeVec(v, sz); }
}
typedef Triple<int, int, int> TIII;
template<class A, class B, class C>
ostream& operator<< (ostream &out, Triple<A, B, C> t) { return out << "(" << t.st << ", " << t.nd << ", " << t.rd << ")"; }
template<class T> ostream& operator<<(ostream& out, vector<T> vec) { out<<"("; for (auto& v: vec) out<<v<<", "; return out<<")"; }
template<class T> ostream& operator<<(ostream& out, set<T> vec) { out<<"("; for (auto& v: vec) out<<v<<", "; return out<<")"; }
template<class L, class R> ostream& operator<<(ostream& out, map<L, R> vec) { out<<"("; for (auto& v: vec) out<<v<<", "; return out<<")"; }
template<typename TH> void _dbg(const char* sdbg, TH h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename TH, typename... TA> void _dbg(const char* sdbg, TH h, TA... t) {
  while(*sdbg != ',') { cerr<<*sdbg++; } cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}


#ifndef LOCAL
#define WATKI 16
counting_semaphore<WATKI> SEM(WATKI);
#define cout OUTPUT
#endif
#define cin cin_nietu


struct Sol{
#ifndef LOCAL  
  stringstream OUTPUT;
#endif
  int CASE;
  
  int N;
  VPII es;
  bool Brut() {
    vector<vector<int>> dist1(N + 2, VI(N + 2, N + 2));
    vector<vector<int>> dist2(N + 2, VI(N + 2, N + 2));
    RE (i, N) {
      dist1[i][i] = 0;
    }
    for (auto e : es) {
      dist1[e.st][e.nd] = dist1[e.nd][e.st] = 1;
    }
    dist2 = dist1;
    for (int i = 1; i <= N; i++)
      for (int k = 1; k <= N; k++)
        for (int j = 1; j <= N; j++)
          dist1[i][j] = min(dist1[i][j], dist1[i][k] + dist1[k][j]);
    RE (k, N) {
      RE (i, N) {
        RE (j, N) {
          mini(dist2[i][j], dist2[i][k] + dist2[k][j]);
        }
      }
    }
    int ok = 1;
    RE (i, N) {
      RE (j, N) {
        ok &= (dist1[i][j] == dist2[i][j]);
      }
    }
    return ok;
  }
  bool Wzo() {
    VVI slo(N + 2);
    for (auto e : es) {
      slo[e.st].PB(e.nd);
      slo[e.nd].PB(e.st);
    }
    VI par(N + 2);
    VI vis(N + 2);
    function<void(int)> Dfs = [&](int v) {
      vis[v] = 1;
      for (auto nei : slo[v]) {
        if (vis[nei]) { continue; }
        par[nei] = v;
        Dfs(nei);
      }
    };
    Dfs(1);
    VI wrong;
    RE (i, N) {
      if (par[i] > i) {
        wrong.PB(i);
      }
    }
    //debug(wrong);
    if (wrong.empty()) {
      return true;
    }
    if (SZ(slo[1]) > 1) {
      return false;
    }
    for (auto wr : wrong) {
      if (par[par[wr]] != 1) { return false; }
    }
    for (auto wr : wrong) {
      if (SZ(slo[wr]) != 1) { return false; }
    }
    if (SZ(wrong) != wrong.back() - 1) { return false; }
    return true;
  }
  void run(){
    cout << "Case #" << CASE + 1 << ": ";
    //int br = Brut();
    int wz  = Wzo();
    //debug(br, wz);
    //assert(br == wz);
    if (wz) {
      cout<<"Lucky"<<endl;
    } else {
      cout<<"Wrong"<<endl;
    }
  
    
    
#ifndef LOCAL
    SEM.release();
#endif
  }
#undef cin
#ifndef LOCAL
#undef cout
#endif
#define cout cout_nietu
  void input(){
    cin>>N;
    RE (i, N - 1) {
      int a, b;
      cin>>a>>b;
      es.PB({a, b});
    }
    
  }
#undef cout
};

int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(11);
  cerr << fixed << setprecision(6);
  int t;
  cin >> t;
  vector<Sol> sols(t);
  REP(i,t){
    sols[i].CASE = i;
    sols[i].input();
#ifdef LOCAL
    sols[i].run();
#else
#undef cerr
    sols[i].OUTPUT << fixed << setprecision(11);
    cerr << "START: " << i << endl;
    SEM.acquire();
    thread tt(&Sol::run, &sols[i]);
    tt.detach();
#endif
  }
#ifndef LOCAL
  REP(i,WATKI){
    cerr << "RUNNING: " << WATKI - i << endl;
    SEM.acquire();
  }
  REP(i,t){
    cout << sols[i].OUTPUT.str();
  }
#endif

}
