#include <bits/stdc++.h>
using namespace std;

template <typename T> void set_min(T& a, const T& b){
	if(b < a) a = b;
}
template <typename T> void set_max(T& a, const T& b){
	if(b > a) a = b;
}


template <typename T> T mod_inv_in_range(T a, T m) {
	// assert(0 <= a && a < m);
	T x = a, y = m;
	// coeff of a in x and y
	T vx = 1, vy = 0;
	while (x) {
		T k = y / x;
		y %= x;
		vy -= k * vx;
		std::swap(x, y);
		std::swap(vx, vy);
	}
	assert(y == 1);
	return vy < 0 ? m + vy : vy;
}

template <typename T> struct extended_gcd_result {
	T gcd;
	T coeff_a, coeff_b;
};
template <typename T> extended_gcd_result<T> extended_gcd(T a, T b) {
	T x = a, y = b;
	// coeff of a and b in x and y
	T ax = 1, ay = 0;
	T bx = 0, by = 1;
	while (x) {
		T k = y / x;
		y %= x;
		ay -= k * ax;
		by -= k * bx;
		std::swap(x, y);
		std::swap(ax, ay);
		std::swap(bx, by);
	}
	return {y, ay, by};
}

template <typename T> T mod_inv(T a, T m) {
	a %= m;
	a = a < 0 ? a + m : a;
	return mod_inv_in_range(a, m);
}

template <int MOD_> struct modnum {
	static constexpr int MOD = MOD_;
	static_assert(MOD_ > 0, "MOD must be positive");

private:
	int v;

public:

	modnum() : v(0) {}
	modnum(int64_t v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }
	explicit operator int() const { return v; }
	friend std::ostream& operator << (std::ostream& out, const modnum& n) { return out << int(n); }
	friend std::istream& operator >> (std::istream& in, modnum& n) { int64_t v_; in >> v_; n = modnum(v_); return in; }

	friend bool operator == (const modnum& a, const modnum& b) { return a.v == b.v; }
	friend bool operator != (const modnum& a, const modnum& b) { return a.v != b.v; }

	modnum inv() const {
		modnum res;
		res.v = mod_inv_in_range(v, MOD);
		return res;
	}
	friend modnum inv(const modnum& m) { return m.inv(); }
	modnum neg() const {
		modnum res;
		res.v = v ? MOD-v : 0;
		return res;
	}
	friend modnum neg(const modnum& m) { return m.neg(); }

	modnum operator- () const {
		return neg();
	}
	modnum operator+ () const {
		return modnum(*this);
	}

	modnum& operator ++ () {
		v ++;
		if (v == MOD) v = 0;
		return *this;
	}
	modnum& operator -- () {
		if (v == 0) v = MOD;
		v --;
		return *this;
	}
	modnum& operator += (const modnum& o) {
		v -= MOD-o.v;
		v = (v < 0) ? v + MOD : v;
		return *this;
	}
	modnum& operator -= (const modnum& o) {
		v -= o.v;
		v = (v < 0) ? v + MOD : v;
		return *this;
	}
	modnum& operator *= (const modnum& o) {
		v = int(int64_t(v) * int64_t(o.v) % MOD);
		return *this;
	}
	modnum& operator /= (const modnum& o) {
		return *this *= o.inv();
	}

	friend modnum operator ++ (modnum& a, int) { modnum r = a; ++a; return r; }
	friend modnum operator -- (modnum& a, int) { modnum r = a; --a; return r; }
	friend modnum operator + (const modnum& a, const modnum& b) { return modnum(a) += b; }
	friend modnum operator - (const modnum& a, const modnum& b) { return modnum(a) -= b; }
	friend modnum operator * (const modnum& a, const modnum& b) { return modnum(a) *= b; }
	friend modnum operator / (const modnum& a, const modnum& b) { return modnum(a) /= b; }
};

template <typename T> T pow(T a, long long b) {
	assert(b >= 0);
	T r = 1; while (b) { if (b & 1) r *= a; b >>= 1; a *= a; } return r;
}

using num = modnum<998244353>;

vector<vector<string> > tests;
vector<int> tests_ans;

void solve(int t){
	int N = (int)tests[t].size();
	vector<string> S = tests[t];
	int MAXL = 0;
	for(string s : S) MAXL = max(MAXL, (int)s.size());

	vector<vector<int> > min_conflict(N, vector<int>(N));
	for(int i = 0; i < N; i++){
		for(int j = 0; j < N; j++){
			min_conflict[i][j] = (int)min(S[i].size(), S[j].size());
			for(int x = 0; x < min_conflict[i][j]; x++){
				if(S[i][x] != '?' && S[j][x] != '?' && S[i][x] != S[j][x]){
					min_conflict[i][j] = x;
					break;
				}
			}
		}
	}

	using bs = bitset<100>;

	bs all;
	for(int i = 0; i < MAXL; i++) all[i] = 1;
	vector<bs> smask(N); // which are '?'
	for(int i = 0; i < N; i++){
		smask[i] = all;
		vector<int> s_mask;
		for(int x = 0; x < (int)S[i].size(); x++){
			if(S[i][x] != '?') smask[i][x] = 0;
		}
	}
	vector<bs> qmask(1 << N, all);
	vector<int> min_conflict_mask(1 << N, MAXL);
	for(int b = 0; b < N; b++){
		for(int msk = 0; msk < (1 << b); msk++){
			qmask[msk ^ (1 << b)] = qmask[msk] & smask[b];
			min_conflict_mask[msk ^ (1 << b)] = min(min_conflict_mask[msk], min_conflict[b][b]);
			for(int c = 0; c < b; c++){
				if((msk) & (1 << c)){
					set_min(min_conflict_mask[msk ^ (1 << b)], min_conflict[b][c]);
				}
			}
		}
	}
	vector<num> p26(MAXL+1, 1);
	for(int i = 1; i <= MAXL; i++) p26[i] = 26 * p26[i-1];
	vector<num> ans(MAXL+1, 0);
	for(int msk = 1; msk < (1 << N); msk++){
		int mul = (__builtin_popcount(msk) & 1) ? 1 : -1;
		int cnt = 0;
		for(int l = 0; l <= min_conflict_mask[msk]; l++){
			if(mul == 1){
				ans[l] += p26[cnt];
			} else {
				ans[l] -= p26[cnt];
			}
			if(l == MAXL) break;
			if(qmask[msk][l]) cnt ++;
		}
	}
	num tot = 0;
	for(num x : ans) tot += x;
	tests_ans[t] = (int)tot;
	cerr << "Done: " << t << '\n';
}

int main(){
	ios_base::sync_with_stdio(false), cin.tie(nullptr);
	int T;
	cin >> T;
	tests.resize(T);
	tests_ans.resize(T);
	for(int t = 0; t < T; t++){
		int N;
		cin >> N;
		vector<string> S(N);
		for(string& x : S) cin >> x;
		tests[t] = S;
	}
	int TL = 0;
	int TR = T;
    vector<thread> threads(T);

	for(int t = TL; t < TR; t++){
		threads[t] = thread(solve, t);
	}
	for(int t = TL; t < TR; t++) threads[t].join();
	for(int t = TL; t < TR; t++){
		cout << "Case #" << (t+1) << ": ";
		cout << tests_ans[t] << '\n';
	}
}
