#include <bits/stdc++.h>

using i64 = long long;
using u64 = unsigned long long;
using u32 = unsigned;

constexpr int inf = 1E9;

void solve() {
    int N;
    std::cin >> N;
    
    std::vector<int> W(N), C(N);
    for (int i = 0; i < N; i++) {
        std::cin >> W[i];
    }
    for (int i = 0; i < N; i++) {
        std::cin >> C[i];
    }
    auto v = C;
    std::sort(v.begin(), v.end());
    v.erase(std::unique(v.begin(), v.end()), v.end());
    int M = v.size();
    
    std::vector<std::vector<int>> p(M);
    for (int i = 0; i < N; i++) {
        C[i] = std::lower_bound(v.begin(), v.end(), C[i]) - v.begin();
        p[C[i]].push_back(i);
    }
    for (int i = 0; i < M; i++) {
        if (p[i].size() != 2 && p[i].size() != 3) {
            std::cout << "No\n";
            return;
        }
    }
    std::vector<int> L(M, 501), R(M, 0);
    for (int i = 0; i < N; i++) {
        if (W[i] != -1) {
            L[C[i]] = std::min(L[C[i]], W[i]);
            R[C[i]] = std::max(R[C[i]], W[i]);
        }
    }
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < i; j++) {
            if (L[i] <= R[j] && L[j] <= R[i]) {
                std::cout << "No\n";
                return;
            }
        }
    }
    std::vector<int> q;
    std::vector<std::vector<std::vector<int>>> cand(M);
    for (int i = 0; i < M; i++) {
        if (L[i] <= R[i]) {
            q.push_back(i);
            std::sort(p[i].begin(), p[i].end(),
                [&](int x, int y) {
                    return W[x] < W[y];
                });
            if (p[i].size() == 2) {
                if (W[p[i][0]] == -1) {
                    int w = W[p[i][1]];
                    if (w - 1 > 0) {
                        cand[i].push_back({w - 1, w});
                    }
                    cand[i].push_back({w, w + 1});
                } else {
                    cand[i].push_back({W[p[i][0]], W[p[i][1]]});
                }
            } else {
                if (W[p[i][1]] == -1) {
                    int w = W[p[i][2]];
                    if (w - 2 > 0) {
                        cand[i].push_back({w - 2, w - 1, w});
                    }
                    if (w - 1 > 0) {
                        cand[i].push_back({w - 1, w, w + 1});
                    }
                    cand[i].push_back({w, w + 1, w + 2});
                } else if (W[p[i][0]] == -1) {
                    int v = W[p[i][1]];
                    int w = W[p[i][2]];
                    for (int x = v + 1; x < w; x++) {
                        cand[i].push_back({v, x, w});
                    }
                    if (w - v == 1) {
                        if (v - 1 > 0) {
                            cand[i].push_back({v - 1, v, w});
                        }
                        cand[i].push_back({v, w, w + 1});
                    }
                } else {
                    cand[i].push_back({W[p[i][0]], W[p[i][1]], W[p[i][2]]});
                }
            }
        }
    }
    std::sort(q.begin(), q.end(),
        [&](int i, int j) {
            return L[i] < L[j];
        });
    
    if (!q.empty()) {
        int K = q.size();
        
        std::vector<std::vector<int>> dp(K);
        std::vector<std::vector<int>> g(K);
        for (int i = 0; i < K; i++) {
            dp[i].resize(cand[q[i]].size());
            g[i].resize(cand[q[i]].size());
            
            std::vector<std::vector<int>> c;
            std::vector<int> v;
            if (i > 0) {
                c = cand[q[i - 1]];
                v = dp[i - 1];
            } else {
                c = {{0}};
                v = {inf};
            }
            
            for (int k = 0; k < cand[q[i]].size(); k++) {
                int res = -inf;
                int u = -1;
                auto a = cand[q[i]][k];
                for (int j = 0; j < c.size(); j++) {
                    if (v[j] == -inf) {
                        continue;
                    }
                    if (c[j].back() >= a[0]) {
                        continue;
                    }
                    int x = 0;
                    int y = v[j];
                    for (int l = 0; l < a.size(); l++) {
                        int d = a[l];
                        if (l > 0) {
                            d -= a[l - 1];
                        } else {
                            d -= c[j].back();
                        }
                        y += d;
                        std::swap(x, y);
                        y = std::min(x, y);
                    }
                    if (x < a.back() - a[0]) {
                        continue;
                    }
                    y -= x;
                    if (res < y) {
                        res = y;
                        u = j;
                    }
                }
                dp[i][k] = res;
                g[i][k] = u;
            }
        }
        
        int k = std::max_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
        if (dp.back()[k] == -inf) {
            std::cout << "No\n";
            return;
        }
        
        for (int i = K - 1; i >= 0; i--) {
            auto a = cand[q[i]][k];
            auto pos = p[q[i]];
            for (auto j : pos) {
                if (W[j] != -1) {
                    a.erase(std::find(a.begin(), a.end(), W[j]));
                }
            }
            for (auto j : pos) {
                if (W[j] == -1) {
                    W[j] = a.back();
                    a.pop_back();
                }
            }
            k = g[i][k];
        }
    }
    
    int cur = 2000;
    
    for (int i = 0; i < M; i++) {
        if (L[i] > R[i]) {
            for (int j = 0; j < p[i].size(); j++) {
                W[p[i][j]] = cur + j;
            }
            cur += 20;
        }
    }
    
    std::cout << "Yes\n";
    for (int i = 0; i < N; i++) {
        std::cout << W[i] << " \n"[i == N - 1];
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    int T;
    std::cin >> T;
    
    for (int i = 1; i <= T; i++) {
        std::cout << "Case #" << i << ": ";
        solve();
    }
    
    return 0;
}
