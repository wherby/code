#include <bits/stdc++.h>
using ll = long long;
using ull = unsigned long long;
using fl = long double;

template<typename S, typename T>
void xmin(S&a, T const&b){if(b<a) a=b;}
template<typename S, typename T>
void xmax(S&a, T const&b){if(b>a) a=b;}

using namespace std;


namespace debug_{

template<size_t N> struct priority : priority<N-1> {};
template<> struct priority<0> {};

template<bool enabled> struct Debug;
template<typename T, typename SFINAE = void> struct Printer : enable_if<false> {};
// pair and tuple
template<typename S, typename T>
struct Printer<pair<S, T> > : enable_if<true> {
    template<typename D>
    static void print(D const&d, pair<S, T> const&val){
        d << "(" << val.first << ", " << val.second << ")";
    }
};
template<typename... S>
struct Printer<tuple<S ...> > : enable_if<true> {
    template<size_t i, size_t n, typename D>
    static void print_rec(D const&d, tuple<S ...> const&val){
        d << get<i>(val);
        if(i+1 < n) {
            d << ", ";
            print_rec<i+(i+1<n), n>(d, val);
        }
    }
    template<typename D>
    static void print(D const&d, tuple<S ...> const&val){
        d << "(";
        print_rec<0, tuple_size<tuple<S...> >::value >(d, val);
        d << ")";
    }
};
template<>
struct Printer<tuple<> > : enable_if<true> {
    template<typename D>
    static void print(D const&d, tuple<> const&){
        d << "()";
    }
};
// non-iterable container
template<typename T>
struct Hacked_Container : T{
    static auto get(T const& val){
        return val.*&Hacked_Container::c;
    }
};
template<typename T> struct is_hackable_container : false_type{};
template<typename... T> struct is_hackable_container<stack<T...> > : true_type{};
template<typename... T> struct is_hackable_container<queue<T...> > : true_type{};
template<typename... T> struct is_hackable_container<priority_queue<T...> > : true_type{};
template<typename T>
struct Printer<T, enable_if_t<is_hackable_container<T>::value> >  : enable_if<true> {
    template<typename D>
    static void print(D const&d, T const&s){
        d << Hacked_Container<T>::get(s);
    }
};
// custom printable struct
template<typename T>
struct Printer<T,enable_if_t<sizeof((declval<T>().debug_print_(2), 1)) != -1>> : enable_if<true>{
    template<typename D>
    static void print(D const&d, T const&val){
        val.debug_print_(d);
    }
};

template <>
struct Debug<false>{
    template<typename T, typename = enable_if_t<is_same<int, decltype((declval<Debug<true>>() << declval<T>()), (int)1)>::value > >
    friend const Debug& operator<<(Debug const&o, T const&){
        return o;
    }
    template<typename... Args>
    void pprint_all(string const&names, Args const& ... vals){}
};
template <>
struct Debug<true>{
    template<typename T, typename = decltype(cerr << declval<T>())>
    void print(T const&val, priority<30>) const {
        cerr << val;
    }
    template<typename T, typename = decltype((begin(declval<T>()), end(declval<T>())))>
    void print(T const&val, priority<20>) const {
        *this << "[";
        bool first = true;
        for(auto const&e:val){
            if(!first) *this << ", ";
            *this << e;
            first = false;
        }
        *this << "]";
    }
    template<typename T, typename = typename Printer<T>::type>
    void print(T const&val, priority<50>) const {
        Printer<T>::print(*this, val);
    }
    void pprint_all_rec(string const&, size_t) const {}
    template<typename T, typename... Args>
    void pprint_all_rec(string const&names, size_t pos, T const&val, Args const& ... rest) const {
        if(pos != 0) *this << ", ";
        assert(pos != string::npos);
        size_t next = names.find(",", pos);
        if(next == string::npos){
                *this << names.substr(pos);
        } else {
            *this << names.substr(pos, next-pos);
            ++next;
        }
        *this << "=" << val;
        pprint_all_rec(names, next, rest...);
    }

    template<typename... Args>
    void pprint_all(string const&names, Args const& ... vals) const {
        *this << "(";
        pprint_all_rec(names, 0, vals...);
        *this << ")";
    }
    template<typename T, typename = decltype(declval<Debug>().print(declval<T>(), priority<99>{}))>
    friend const Debug& operator<<(Debug const &o, T const& val){
        o.print(val, priority<99>{});
        return o;
    }
};
}

#define make_printable(...)\
template<typename T>\
void debug_print_(T const& d)const{\
    d.pprint_all(#__VA_ARGS__, __VA_ARGS__);\
}

#ifndef LOCAL_RUN
debug_::Debug<false> debug;
#else

 debug_::Debug<true> debug;
// debug_::Debug<false> debug; // disable debug printing

#endif
#define named(x) string(#x) << " : " <<  x

struct Color{
    vector<int> forced;
    int quest = 0;
    int id;

    void sort(){
        std::sort(forced.begin(), forced.end());
    }
    void push(int x){
        assert(quest > 0);
        --quest;
        forced.push_back(x);
        sort();
    }
    make_printable(id, quest, forced)
};

const int MAX_DELTA = 1001;
const int MAX_X = 10001;


void solve(){
    /// SOLVE HERE
    int n;
    cin >> n;
    cerr << "n is " << n << "\n";
    uint64_t steps = 0;

    vector<int> w(n);
    vector<int> cc(n);
    for(auto &e : w) cin >> e;
    for(auto &e : cc) cin >> e;
    unordered_map<int, vector<int> > occ;
    for(int i=0; i<n; ++i){
        occ[cc[i]].push_back(w[i]);
    }
    for(auto &e : occ) sort(e.second.begin(), e.second.end());
    for(auto &e : occ) {
        if(e.second.size() > 3){
            cout << "No\n";
            return;
        }
        auto &ww = e.second;
        if(*max_element(ww.begin(), ww.end()) == -1){
            for(int i=0; i<ssize(ww); ++i){
                ww[i] = 4000 + e.first*10 + i;
            }
        }
    }
    vector<Color> v;
    for(auto &e : occ) {
        v.emplace_back();
        v.back().id = e.first;
        for(int x : e.second){
            if(x == -1) v.back().quest +=1;
            else v.back().forced.push_back(x);
        }
        v.back().sort();
    }
    const int nn = ssize(v);
    sort(v.begin(), v.end(), [&](auto const&a, auto const&b){
            return a.forced[0] < b.forced[0];
         });

    // solve with given positions
    auto block = [&](auto rec, vector<int> pos, int i, int x, int delta, bool first = false) -> bool{
        //debug << pos << "\n";
        sort(pos.begin(), pos.end());
        if(pos[0] <= 0) return false;
        if(x >= pos[0]) return false;

        const int intended = pos[0] - x;
        pos.insert(pos.begin(), x);

        vector<int> dp(pos.size()+1);
        dp[0] = 0;
        dp[1] = delta;
        for(int i=1; i<ssize(pos); ++i){
            dp[i+1] = max(dp[i], dp[i-1] + pos[i] - pos[i-1]);
        }
        if(dp.rbegin()[1] > intended) return false;
        assert(dp.rbegin()[1] == intended);
        return rec(rec, i+1, pos.back(), dp.rbegin()[0] - dp.rbegin()[1], first);
    };

    vector<char> cache(1+nn * MAX_X * MAX_DELTA, -1);

    auto index = [&](int i, int x, int delta) -> int{
        assert(delta < MAX_DELTA);
        if(x < 0) return ssize(cache)-1;
        return i + nn*(x + MAX_X * (delta));
    };

    // delta = gain if last is isolated
    auto rec = [&](auto rec, int i, int x, int delta, bool first = false) -> bool{
        //debug << i << " " << x << " " << delta << " " << first << "\n";
        if(i == ssize(v)) return true;
        auto &ca = cache[index(i, x, delta)];
        if(!first && ca != -1) return ca;

        Color const&c = v[i];
        if(!c.quest){
            return block(rec, c.forced, i, x, delta, first);
        }
        if(c.quest == 1){
            if(ssize(c.forced) == 1){
                const int y = c.forced[0];
                bool ret = false;
                ret = ret || block(rec, {y-1, y}, i, x, delta);
                if(first && ret) {v[i].push(y-1); first=false; }
                ret = ret || block(rec, {y, y+1}, i, x, delta);
                if(first && ret) {v[i].push(y+1); first=false; }
                if(!first) ca = ret;
                return ret;
            }
            if(ssize(c.forced) == 2){
                const int y = c.forced[0];
                const int z = c.forced[1];
                bool ret = false;
                for(int j=y-1; j<=z+1; ++j){
                    if(j == y || j == z) continue;
                    ret = ret || block(rec, {j, y, z}, i, x, delta);
                    if(first && ret) {v[i].push(j); first=false; }
                }
                if(!first) ca = ret;
                return ret;
            }
            assert(0);
        }
        if(c.quest == 2){
            assert(ssize(c.forced) == 1);
            const int y = c.forced[0];
            bool ret = false;
            ret = ret || block(rec, {y-2, y-1, y}, i, x, delta);
            if(first && ret) {v[i].push(y-2); v[i].push(y-1); first=false; }
            ret = ret || block(rec, {y-1, y, y+1}, i, x, delta);
            if(first && ret) {v[i].push(y+1); v[i].push(y-1); first=false; }
            ret = ret || block(rec, {y, y+1, y+2}, i, x, delta);
            if(first && ret) {v[i].push(y+1); v[i].push(y+2); first=false; }
            if(!first) ca = ret;
            return ret;
        }
        assert(0);
        return false;
    };
    bool possible = rec(rec, 0, -999, 0, true);
    if(!possible){
        cout << "No\n";
        return;
    }
    cout << "Yes\n";
    while(any_of(v.begin(), v.end(), [&](auto x){ return x.quest > 0;})){
        possible = rec(rec, 0, -999, 0, true);
        //debug << v << "\n";
        assert(possible);
    }
    for(auto &e : v){
        for(int x : e.forced){
            bool has = false;
            int j = -1;
            for(int i=0; i<n; ++i){
                if(cc[i] != e.id) continue;
                if(w[i] == -1) j = i;
                if(w[i] == x) has = true;
            }
            if(!has){
                assert(j >= 0);
                w[j] = x;
            }
        }
    }
    for(auto &x : w) cout << x << " ";
    cout << "\n";
}

signed gen(int T){
    mt19937 rng(43151);
    auto get_rand = [&](int64_t l, int64_t r){
        return uniform_int_distribution<int64_t>(l, r)(rng);
    }; (void)get_rand;
    auto get_double = [&](double l, double r){
        return uniform_real_distribution<double>(l, r)(rng);
    }; (void)get_double;
    ofstream o("gen.txt");
    o << T << "\n";
    for(int cas=0;cas<T;++cas){
        /// GEN HERE
        int n = 99;
        o << n << "\n";
        for(int i=0; 3*i<n; ++i){
            const int x = 1+15*i;
            o << x << " -1 " << x+2 << " ";
        }
        o << "\n";
        for(int i=0; 3*i<n; ++i){
            o << 1+i << " " << 1+i << " " << 1+i << " ";
        }
        o << "\n";

        o << "\n";
    }
    o << endl;
    o.close();
    return 0;
}

int main()
{
    #ifdef LOCAL_RUN
    freopen("inD.txt", "r", stdin);
    freopen("outD.txt", "w", stdout);
    #endif // LOCAL_RUN
    cin.tie(0); cout.tie(0);
    ios_base::sync_with_stdio(false);
    int TTT; cin >> TTT;
	if(TTT < 0) return gen(-TTT);
    for(int cas = 1;cas<=TTT;++cas){
        cout << "Case #" << cas << ": ";
        cerr << "Case #" << cas << ":\n";

        solve();

        //cout << "\n";
        #ifdef LOCAL_RUN
        cout << flush;
        #endif // LOCAL_RUN
    }
    return 0;
}
