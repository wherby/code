#undef _GLIBCXX_DEBUG
#include <bits/stdc++.h>
using ll = long long;
using ull = unsigned long long;
using fl = long double;

template<typename S, typename T>
void xmin(S&a, T const&b){if(b<a) a=b;}
template<typename S, typename T>
void xmax(S&a, T const&b){if(b>a) a=b;}

using namespace std;


namespace debug_{

template<size_t N> struct priority : priority<N-1> {};
template<> struct priority<0> {};

template<bool enabled> struct Debug;
template<typename T, typename SFINAE = void> struct Printer : enable_if<false> {};
// pair and tuple
template<typename S, typename T>
struct Printer<pair<S, T> > : enable_if<true> {
    template<typename D>
    static void print(D const&d, pair<S, T> const&val){
        d << "(" << val.first << ", " << val.second << ")";
    }
};
template<typename... S>
struct Printer<tuple<S ...> > : enable_if<true> {
    template<size_t i, size_t n, typename D>
    static void print_rec(D const&d, tuple<S ...> const&val){
        d << get<i>(val);
        if(i+1 < n) {
            d << ", ";
            print_rec<i+(i+1<n), n>(d, val);
        }
    }
    template<typename D>
    static void print(D const&d, tuple<S ...> const&val){
        d << "(";
        print_rec<0, tuple_size<tuple<S...> >::value >(d, val);
        d << ")";
    }
};
template<>
struct Printer<tuple<> > : enable_if<true> {
    template<typename D>
    static void print(D const&d, tuple<> const&){
        d << "()";
    }
};
// non-iterable container
template<typename T>
struct Hacked_Container : T{
    static auto get(T const& val){
        return val.*&Hacked_Container::c;
    }
};
template<typename T> struct is_hackable_container : false_type{};
template<typename... T> struct is_hackable_container<stack<T...> > : true_type{};
template<typename... T> struct is_hackable_container<queue<T...> > : true_type{};
template<typename... T> struct is_hackable_container<priority_queue<T...> > : true_type{};
template<typename T>
struct Printer<T, enable_if_t<is_hackable_container<T>::value> >  : enable_if<true> {
    template<typename D>
    static void print(D const&d, T const&s){
        d << Hacked_Container<T>::get(s);
    }
};
// custom printable struct
template<typename T>
struct Printer<T,enable_if_t<sizeof((declval<T>().debug_print_(2), 1)) != -1>> : enable_if<true>{
    template<typename D>
    static void print(D const&d, T const&val){
        val.debug_print_(d);
    }
};

template <>
struct Debug<false>{
    template<typename T, typename = enable_if_t<is_same<int, decltype((declval<Debug<true>>() << declval<T>()), (int)1)>::value > >
    friend const Debug& operator<<(Debug const&o, T const&){
        return o;
    }
    template<typename... Args>
    void pprint_all(string const&names, Args const& ... vals){}
};
template <>
struct Debug<true>{
    template<typename T, typename = decltype(cerr << declval<T>())>
    void print(T const&val, priority<30>) const {
        cerr << val;
    }
    template<typename T, typename = decltype((begin(declval<T>()), end(declval<T>())))>
    void print(T const&val, priority<20>) const {
        *this << "[";
        bool first = true;
        for(auto const&e:val){
            if(!first) *this << ", ";
            *this << e;
            first = false;
        }
        *this << "]";
    }
    template<typename T, typename = typename Printer<T>::type>
    void print(T const&val, priority<50>) const {
        Printer<T>::print(*this, val);
    }
    void pprint_all_rec(string const&, size_t) const {}
    template<typename T, typename... Args>
    void pprint_all_rec(string const&names, size_t pos, T const&val, Args const& ... rest) const {
        if(pos != 0) *this << ", ";
        assert(pos != string::npos);
        size_t next = names.find(",", pos);
        if(next == string::npos){
                *this << names.substr(pos);
        } else {
            *this << names.substr(pos, next-pos);
            ++next;
        }
        *this << "=" << val;
        pprint_all_rec(names, next, rest...);
    }

    template<typename... Args>
    void pprint_all(string const&names, Args const& ... vals) const {
        *this << "(";
        pprint_all_rec(names, 0, vals...);
        *this << ")";
    }
    template<typename T, typename = decltype(declval<Debug>().print(declval<T>(), priority<99>{}))>
    friend const Debug& operator<<(Debug const &o, T const& val){
        o.print(val, priority<99>{});
        return o;
    }
};
}

#define make_printable(...)\
template<typename T>\
void debug_print_(T const& d)const{\
    d.pprint_all(#__VA_ARGS__, __VA_ARGS__);\
}

#ifndef LOCAL_RUN
debug_::Debug<false> debug;
#else

 debug_::Debug<true> debug;
// debug_::Debug<false> debug; // disable debug printing

#endif
#define named(x) string(#x) << " : " <<  x



struct Fen{
    Fen(int N) : n(N+15), v(n+15, vector<int>(n+15, 0)) {};

    void u(int a, int b, int z){
        for(int x = a+1; x<n; x+=(x&-x)){
            for(int y = b+1; y<n; y += (y&-y)){
                v[x][y] += z;
            }
        }
    }
    int q(int a, int b){
        if(a < 0 || b < 0) return 0;
        ++a; ++b;
        if(a > n) a = n-1;
        if(b > n) b = n-1;
        int ret = 0;
        for(int x  = a; x; x&=(x-1)){
            for(int y = b; y; y&=(y-1)){
                ret += v[x][y];
            }
        }
        return ret;
    }

    int n;
    vector<vector<int> > v;
};


void solve(){
    /// SOLVE HERE
    int n, X, Y;
    ll k;
    cin >> X >> Y >> k;
    unordered_map<int, vector<pair<int, int> > > v;
    v.reserve(1024);
    v.max_load_factor(0.25);
    for(int i=0; i<X; ++i){
        for(int j=0; j<Y; ++j){
            int z;
            cin >> z;
            v[z].emplace_back(i, j);
            v[-1].emplace_back(i, j);
        }
    }
    Fen fen(2*(X+Y+2));
    auto cnt = [&](int d){
        ll ret = 0;
        for(auto const&[t, w] : v){
            ll me = 0;
            for(auto const&[x, y] : w){
                fen.u(x, y, 1);
            }
            for(auto const&[x, y] : w){
                me += fen.q(x + d, y + d);
                me -= fen.q(x - d-1, y + d);
                me -= fen.q(x + d, y - d-1);
                me += fen.q(x - d-1, y - d-1);
            }
            for(auto const&[x, y] : w){
                fen.u(x, y, -1);
            }
            //debug << d << " " << t << " -> " << me << "\n";
            if(t == -1) ret += me;
            else ret -= me;
        }
        //debug << d << " -> " << ret << "\n";
        return ret;
    };
    int a = -1, b = X+Y+2;
    while(b-a > 1){
        const int m = a + (b-a)/2;
        if(cnt(m) < k){
            a = m;
        } else {
            b = m;
        }
    }
    cout << b << "\n";



}

signed gen(int T){
    mt19937 rng(43151);
    auto get_rand = [&](int64_t l, int64_t r){
        return uniform_int_distribution<int64_t>(l, r)(rng);
    }; (void)get_rand;
    auto get_double = [&](double l, double r){
        return uniform_real_distribution<double>(l, r)(rng);
    }; (void)get_double;
    ofstream o("gen.txt");
    o << T << "\n";
    for(int cas=0;cas<T;++cas){
        /// GEN HERE
        int X = 800, Y = 800;
        o << X << " " << Y << " " << (X*Y)/4 << "\n";
        for(int i=0; i<X; ++i){
            for(int j=0; j<Y; ++j){
                o << get_rand(1, 1e9) << " ";
            }
            o << "\n";
        }

        o << "\n";
    }
    o << endl;
    o.close();
    return 0;
}

int main()
{
    #ifdef LOCAL_RUN
    freopen("inC.txt", "r", stdin);
    freopen("outC.txt", "w", stdout);
    #endif // LOCAL_RUN
    cin.tie(0); cout.tie(0);
    ios_base::sync_with_stdio(false);
    int TTT; cin >> TTT;
	if(TTT < 0) return gen(-TTT);
    for(int cas = 1;cas<=TTT;++cas){
        cout << "Case #" << cas << ": ";
        cerr << "Case #" << cas << ":\n";

        solve();

        //cout << "\n";
        #ifdef LOCAL_RUN
        cout << flush;
        #endif // LOCAL_RUN
    }
    return 0;
}
