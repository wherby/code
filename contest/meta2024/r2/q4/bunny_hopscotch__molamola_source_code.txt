#include <bits/stdc++.h>
using namespace std;

using FL = long double;
using ll = long long;
const ll mod = 1e9 + 7;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
#define Fi first
#define Se second
#define rep(i, n) for(int (i)=0;(i)<(n);(i)++)
#define szz(x) ((x).size())
#define pb push_back

int R, C, B[810][810];
ll K;
vector <pii> V[800080];

void solve() {
	scanf("%d%d%lld", &R, &C, &K);
	for(int i=1;i<=R;i++) for(int j=1;j<=C;j++) scanf("%d", B[i] + j);
	int RC = R * C;
	for(int i=1;i<=R;i++) for(int j=1;j<=C;j++) V[B[i][j]].pb({i, j});

	auto f = [&](int L) {
		ll cnt = 0;
		for(int i=1;i<=R;i++) for(int j=1;j<=C;j++) {
			int r1 = max(1, i - L);
			int r2 = min(R, i + L);
			int c1 = max(1, j - L);
			int c2 = min(C, j + L);
			cnt += (r2 - r1 + 1) * (c2 - c1 + 1) - 1;
		}
		int tree[810] = {};
		auto upd = [&](int x, int v) {
			for(int i=x;i<810;i+=(i&-i)) tree[i] += v;
		};
		auto read = [&](int l, int r) {
			int res = 0;
			for(int i=r;i;i-=(i&-i)) res += tree[i];
			for(int i=l-1;i;i-=(i&-i)) res -= tree[i];
			return res;
		};
		for(int i=1;i<=RC;i++) {
			int m = szz(V[i]);
			int j = 0, k = 0;
			for(;j<m;j++) {
				pii p = V[i][j];
				while(V[i][k] < pii(p.Fi - L, p.Se - L)) {
					upd(V[i][k].second, -1);
					++k;
				}
				int c1 = max(1, p.Se - L);
				int c2 = min(C, p.Se + L);
				cnt -= read(c1, c2) * 2;
				upd(V[i][j].second, 1);
			}
			while(k < m) {
				upd(V[i][k].second, -1);
				++k;
			}
		}
		return cnt;
	};

	int low = 1, high = max(R, C) - 1, res = -1;
	while(low <= high) {
		int mid = (low + high) >> 1;
		if(f(mid) >= K) res = mid, high = mid - 1;
		else low = mid + 1;
	}

	printf("%d\n", res);
	for(int i=1;i<=RC;i++) V[i].clear();
}

int main() {
	int T = 1; scanf("%d", &T);
	for(int tc=1;tc<=T;tc++) {
		fprintf(stderr, "! %d\n", tc);
		printf("Case #%d: ", tc);
		solve();
	}
	return 0;
}