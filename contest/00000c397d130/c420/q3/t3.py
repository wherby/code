from typing import List, Tuple, Optional

from collections import defaultdict,deque
from functools import cache
import heapq
from heapq import heappop,heappush 
from sortedcontainers import SortedDict,SortedList

from bisect import bisect_right,insort_left,bisect_left
from queue import Queue,LifoQueue,PriorityQueue
import math
INF  = math.inf


def get_prime(n):
    visited=[0]*(n+2)
    m = int(math.sqrt(n+1)) +2
    for i in range(2,m):
        if visited[i]: continue
        for j in range(i*2,n+1,i):
            if visited[j] ==0:
                visited[j] =i
    return visited
pls =  get_prime(10**6)
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        mx = max(nums)
        
        acc =0
        lst =nums[-1]
        for a in nums[::-1]:
            if a > lst:
                if pls[a]!=0:
                    a = pls[a]
                    if a > lst:
                        return -1 
                    lst =a 
                    acc +=1
                else:
                    return -1
            else:
                lst =a 
        return acc
        



nums = [683,1879,2617,4133,4363,7069,8737,8783,14431,14639,17939,19001,20393,20789,21067,21107,21493,21683,23327,23327,23899,24943,25153,26021,26321,27239,28201,28517,30029,30977,31231,32341,32507,33679,35993,37201,38677,39607,39709,41179,41957,41983,42787,43313,46691,47501,48383,48679,49261,49613,49937,51767,52583,54163,54617,54919,57139,58369,59387,60293,60901,61381,61403,64577,65899,67153,68611,68917,70123,70271,71287,71741,74831,75347,75511,75683,77023,78539,78839,79273,81173,81671,84247,84407,84659,88651,89017,89293,89627,89909,92569,93113,94777,94837,97711,98387,99409,100003,101963,101977,101987,104479,104491,107351,110863,111493,114889,115771,115981,116273,117209,117373,117979,118897,119057,120997,122033,127301,127849,128483,129281,129419,131441,131947,137029,137353,137777,139201,140339,144931,145543,147613,150769,150797,151841,152531,152843,153353,155461,158617,159079,159293,160367,161879,162011,166063,168071,169241,169343,169633,170239,171203,171341,171517,177691,180097,180617,181283,181639,182279,183709,183877,184003,185651,186239,186743,190297,190787,190811,191837,192931,193603,193951,194027,194647,195043,203773,204511,207029,208627,209621,209821,211681,211867,214391,214657,214883,218873,220243,220351,220589,221059,221677,221723,222011,223507,227177,227501,228523,231559,232871,233329,234197,238439,239237,239999,243233,246173,250799,252079,254407,255637,257437,257459,257903,258959,259631,261601,261721,262349,263213,264343,267587,269429,271129,272039,276869,277169,281623,281663,283099,284657,285763,288661,291257,292393,293717,294793,297853,299239,301673,304651,305759,305857,307019,310591,310697,313267,314063,314723,315103,315907,316819,318691,318911,324211,324589,326437,326537,326693,329053,331997,332201,334661,335009,335641,336101,336397,337313,338167,340877,341477,343727,347731,348587,349171,349787,352333,354313,355417,355549,355651,357239,359501,359621,360337,360979,362099,362473,368513,368939,369067,369979,371617,373073,373363,375553,377779,377873,378629,379073,380869,383417,385927,386777,387077,388699,391117,391199,392213,393587,397223,397379,397921,402331,402601,406183,406817,407311,409733,410143,410231,411233,412493,413087,414331,415669,417437,417643,418109,418783,420569,420781,420967,421339,421697,423697,423883,425071,426103,426641,428249,429197,429223,429953,430699,431147,431513,431881,433249,433729,433817,435923,437219,437687,437849,439853,441517,443077,445829,447401,448093,449077,449591,450209,450601,451799,452521,453293,456023,457739,459007,460619,460979,461507,462263,462643,463387,463633,464081,464437,464803,466729,467329,467743,469691,471533,473939,474983,476027,479201,479357,482413,486679,487021,487079,488197,490453,493481,493733,495557,496073,497521,497689,498391,499063,501001,501089,502543,502549,503707,503791,504337,507289,507907,508451,509389,511757,512573,514081,514519,514903,517411,519121,520361,520967,521503,522439,523729,525593,526571,529673,533879,535919,540599,541859,542693,543859,545641,546643,547237,547709,549431,549553,549667,550801,557041,557273,557591,558479,559703,562967,563047,564097,566011,566183,566821,570253,573047,576041,576217,578843,579713,580717,581953,584081,585269,585877,587021,587201,589807,592897,593851,594569,595967,596069,598999,600641,600703,602201,602383,602477,604787,604907,606077,615449,615557,616391,617699,617879,618847,622159,622241,623071,627227,628363,629339,634483,634709,634853,635249,637729,641083,642673,643463,644597,645503,647891,648377,649661,652229,652549,653473,653941,656263,656323,656429,657959,658309,661483,662003,666031,667561,669689,670903,671893,672311,675179,675601,679373,679517,679733,684311,684587,686051,686269,687307,687397,688531,692221,692387,693353,694271,694763,696691,697069,698653,701699,701837,702623,702803,703117,703643,703789,705521,708481,708569,710873,711017,711187,713381,715193,721739,725341,725579,726647,727267,727399,727673,730537,730789,734189,734663,734771,736717,740581,742277,743027,747239,747463,748301,751453,751879,752803,753931,753983,754121,755143,758971,760367,760411,760961,761087,763513,763573,764059,765313,766187,769997,771427,772403,773951,779189,781367,781819,782849,785641,787489,787639,791321,791411,792581,792893,793139,793229,795103,795643,796451,796673,796969,799361,802661,802829,806153,806579,807463,809359,809993,814061,814633,819407,819659,822343,823351,823787,825131,826349,827779,828859,829289,830341,830743,830989,831893,832373,842339,842551,845017,845357,846733,847853,847883,848843,848851,848893,853763,859249,860969,863693,865159,865871,869291,870953,874249,875689,875773,881983,886043,886663,886891,890371,890797,896669,897497,898199,900593,901447,901841,903649,904903,905713,906233,906617,906751,907369,909451,915143,917353,918067,922741,923051,923543,925369,928423,929261,930773,933151,934723,935183,936679,938969,940301,940361,945331,946163,946801,947927,948061,948349,948877,950239,950921,950927,951911,952207,952253,952843,954269,955267,957557,958541,960293,964787,965191,966653,967843,969911,972823,973279,973331,973757,976187,976883,981467,981913,982097,983617,984761,986707,988759,988783,988861,989581,991201,991607,991817,993211,996187,997681,998537]

re =Solution().minOperations(nums )
print(re)